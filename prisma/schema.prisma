generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("postgresql://postgres:*9.kwN4De4.jCU9@db.qyrrjznbejbqbxomwazo.supabase.co:5432/postgres")
}

model SchoolData {
  id                        String                @id @default(uuid())
  name                      String
  phoneNumber1              String?
  phoneNumber2              String?
  phoneNumber3              String?
  schoolsWebSite            String?
  facebookProfileURL        String?
  instagramProfileURL       String?
  founder                   String?
  director                  String?
  publicRelationsManager    String?
  parentRelationshipManager String?
  otherPrograms             String?
  description               String?
  hasTutor                  Boolean               @default(false)
  tutorDescription          String?
  hasScholarshipsGrants     Boolean               @default(false)
  scholarshipsGrants        String?
  hasExchangePrograms       Boolean               @default(false)
  exchangePrograms          String?
  hasOutdoorGarden          Boolean               @default(false)
  outdoorGarden             String?
  createdAt                 DateTime              @default(now())
  createdBy                 DateTime?
  updatedAt                 DateTime              @updatedAt
  updatedBy                 DateTime?
  establishedYear           Int?
  accreditationStatus       String?
  accreditationComment      String?
  graduationRate            String?
  averageNationalExamScore  String?
  address                   Address?              @relation("AddressToSchool")
  infrastructure            Infrastructure?       @relation("InfrastructureToSchool")
  primary                   Primary?              @relation("PrimaryToSchool")
  basic                     Basic?                @relation("BasicToSchool")
  secondary                 Secondary?            @relation("SecondaryToSchool")
  media                     Media[]
  levelMandatorySports      LevelMandatorySport[] @relation("SchoolToLevelMandatorySport")
}

model Address {
  id           String     @id @default(uuid())
  schoolDataId String     @unique
  city         String?
  district     String?
  street       String?
  zipCode      String?
  school       SchoolData @relation("AddressToSchool", fields: [schoolDataId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Infrastructure {
  id             String     @id @default(uuid())
  schoolDataId   String     @unique
  buildings      Boolean?   @default(false)
  numberOfFloors Int?
  squareness     Int?
  stadiums       Boolean?   @default(false)
  pools          Boolean?   @default(false)
  courtyard      Boolean?   @default(false)
  laboratories   Boolean?   @default(false)
  library        Boolean?   @default(false)
  cafe           Boolean?   @default(false)
  school         SchoolData @relation("InfrastructureToSchool", fields: [schoolDataId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Primary {
  id                      String                @id @default(uuid())
  schoolId                String                @unique
  school                  SchoolData            @relation("PrimaryToSchool", fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  price                   Int?
  duration                String?
  discountAndPaymentTerms String?
  numberOfStudents        Int?
  meals                   String?
  mealsDescription        String?
  transportation          String?
  schoolUniform           Boolean               @default(false)
  mandatorySportsClubs    String?
  foreignLanguages        String?
  teachingStyleBooks      String?
  clubsAndCircles         String?
  textbooksPrice          String?
  media                   Media[]
  levelMandatorySports    LevelMandatorySport[] @relation("PrimaryToLevelMandatorySport")

  @@index([schoolId])
}

model Basic {
  id                      String                @id @default(uuid())
  schoolId                String                @unique
  school                  SchoolData            @relation("BasicToSchool", fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  price                   Int?
  duration                String?
  discountAndPaymentTerms String?
  numberOfStudents        Int?
  meals                   String?
  mealsDescription        String?
  transportation          String?
  schoolUniform           Boolean               @default(false)
  mandatorySportsClubs    String?
  foreignLanguages        String?
  teachingStyleBooks      String?
  clubsAndCircles         String?
  textbooksPrice          String?
  media                   Media[]
  levelMandatorySports    LevelMandatorySport[] @relation("BasicToLevelMandatorySport")

  @@index([schoolId])
}

model Secondary {
  id                      String                @id @default(uuid())
  schoolId                String                @unique
  school                  SchoolData            @relation("SecondaryToSchool", fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  price                   Int?
  duration                String?
  discountAndPaymentTerms String?
  numberOfStudents        Int?
  meals                   String?
  mealsDescription        String?
  transportation          String?
  schoolUniform           Boolean               @default(false)
  mandatorySportsClubs    String?
  foreignLanguages        String?
  teachingStyleBooks      String?
  clubsAndCircles         String?
  textbooksPrice          String?
  media                   Media[]
  levelMandatorySports    LevelMandatorySport[] @relation("SecondaryToLevelMandatorySport")

  @@index([schoolId])
}

model Media {
  id          String          @id @default(uuid())
  mediaUrl    String          @map("media_url")
  description String?
  schoolId    String?         @map("school_id")
  basicId     String?         @map("basic_id")
  primaryId   String?         @map("primary_id")
  secondaryId String?         @map("secondary_id")
  createdAt   DateTime?       @default(now()) @map("created_at")
  updatedAt   DateTime?       @default(now()) @updatedAt @map("updated_at")
  type        MediaType
  attachedTo  MediaAttachment
  basic       Basic?          @relation(fields: [basicId], references: [id])
  primary     Primary?        @relation(fields: [primaryId], references: [id])
  school      SchoolData?     @relation(fields: [schoolId], references: [id])
  secondary   Secondary?      @relation(fields: [secondaryId], references: [id])

  @@index([schoolId])
  @@index([basicId])
  @@index([primaryId])
  @@index([secondaryId])
  @@map("media")
}

model LevelMandatorySport {
  id          String    @id @default(uuid())
  school_id   String
  school_name String?
  level_name  LevelName
  level_id    String
  sport       String?
  primaryId   String?
  basicId     String?
  secondaryId String?

  primary   Primary?   @relation("PrimaryToLevelMandatorySport", fields: [primaryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  basic     Basic?     @relation("BasicToLevelMandatorySport", fields: [basicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  secondary Secondary? @relation("SecondaryToLevelMandatorySport", fields: [secondaryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  school SchoolData @relation("SchoolToLevelMandatorySport", fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([school_id])
  @@map("LevelMandatorySport") // map to exact DB table name
}

enum LevelName {
  Primary
  Basic
  Secondary
}

enum MediaType {
  photo
  video
}

enum MediaAttachment {
  school
  primary
  basic
  secondary
}
