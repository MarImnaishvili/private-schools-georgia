generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SchoolData {
  id                        Int             @id @default(autoincrement())
  name                      String
  addressId                 Int
  phoneNumber1              String?
  phoneNumber2              String?
  phoneNumber3              String?
  schoolsWebSite            String?
  facebookProfileURL        String?
  instagramProfileURL       String?
  founder                   String?
  director                  String?
  publicRelationsManager    String?
  parentRelationshipManager String?
  infrastructureId          Int?
  primaryLevelId            Int?
  basicLevelId              Int?
  secondaryLevelID          Int?
  otherPrograms             String?
  description               String?
  hasTutor                  Boolean         @default(false)
  tutorDescription          String?
  hasScholarshipsGrants     Boolean         @default(false)
  scholarshipsGrants        String?
  hasExchangePrograms       Boolean         @default(false)
  exchangePrograms          String?
  hasOutdoorGarden          Boolean         @default(false)
  outdoorGarden             String?
  createdAt                 DateTime        @default(now())
  createdBy                 DateTime?
  updatedAt                 DateTime        @updatedAt
  updatedBy                 DateTime?
  establishedYear           Int?
  accreditationStatus       String?
  accreditationComment      String?
  graduationRate            Float?          @db.Real
  averageNationalExamScore  Float?          @db.Real
  address                   Address         @relation(fields: [addressId], references: [id])
  basicLevel                BasicLevel?     @relation(fields: [basicLevelId], references: [id])
  infrastructure            Infrastructure? @relation(fields: [infrastructureId], references: [id])
  primaryLevel              PrimaryLevel?   @relation(fields: [primaryLevelId], references: [id])
  secondaryLevel            SecondaryLevel? @relation(fields: [secondaryLevelID], references: [id])
  media                     Media[]

  @@index([addressId])
  @@index([basicLevelId])
  @@index([infrastructureId])
  @@index([primaryLevelId])
  @@index([secondaryLevelID])
}

model Address {
  id       Int          @id @default(autoincrement())
  city     String
  district String
  street   String
  zipCode  String
  schools  SchoolData[]
}

model Infrastructure {
  id                     Int          @id @default(autoincrement())
  buildings_has          Boolean      @default(false)
  buildings_comment      String?
  numberOfFloors_has     Int?
  numberOfFloors_comment String?
  squareness_has         Int?
  squareness_comment     String?
  stadiums_has           Boolean      @default(false)
  stadiums_comment       String?
  pools_has              Boolean      @default(false)
  pools_comment          String?
  courtyard_has          Boolean      @default(false)
  courtyard_comment      String?
  laboratories_has       Boolean      @default(false)
  laboratories_comment   String?
  library_has            Boolean      @default(false)
  library_comment        String?
  cafe_has               Boolean      @default(false)
  cafe_comment           String?
  schools                SchoolData[]
}

model PrimaryLevel {
  id                        Int          @id @default(autoincrement())
  price                     Decimal
  duration                  String
  discountAndPaymentTerms   String?
  numberOfStudents          Int
  meals                     String?
  mealsDescription          String?
  transportation            String?
  transportationDescription String?
  schoolUniform             Boolean      @default(false)
  schoolUniformDescription  String?
  mandatorySportsClubs      String?
  optionalSportsClubs       String?
  foreignLanguages          String?
  teachingStyleBooks        String?
  clubsAndCircles           String?
  textbooksPrice            String?
  schools                   SchoolData[]
  media                     Media[]
}

model BasicLevel {
  id                        Int          @id @default(autoincrement())
  price                     Decimal
  duration                  String
  discountAndPaymentTerms   String?
  numberOfStudents          Int
  meals                     String?
  mealsDescription          String?
  transportation            String?
  transportationDescription String?
  schoolUniform             Boolean      @default(false)
  schoolUniformDescription  String?
  mandatorySportsClubs      String?
  optionalSportsClubs       String?
  foreignLanguages          String?
  teachingStyleBooks        String?
  clubsAndCircles           String?
  textbooksPrice            String?
  schools                   SchoolData[]
  media                     Media[]
}

model SecondaryLevel {
  id                        Int          @id @default(autoincrement())
  price                     Decimal
  duration                  String
  discountAndPaymentTerms   String?
  numberOfStudents          Int
  meals                     String?
  mealsDescription          String?
  transportation            String?
  transportationDescription String?
  schoolUniform             Boolean      @default(false)
  schoolUniformDescription  String?
  mandatorySportsClubs      String?
  optionalSportsClubs       String?
  foreignLanguages          String?
  teachingStyleBooks        String?
  clubsAndCircles           String?
  textbooksPrice            String?
  schools                   SchoolData[]
  media                     Media[]
}

model Media {
  id               Int             @id @default(autoincrement())
  mediaUrl         String          @map("media_url")
  description      String?
  schoolId         Int?            @map("school_id")
  basicLevelId     Int?            @map("basic_level_id")
  primaryLevelId   Int?            @map("primary_level_id")
  secondaryLevelId Int?            @map("secondary_level_id")
  createdAt        DateTime?       @default(now()) @map("created_at")
  updatedAt        DateTime?       @default(now()) @updatedAt @map("updated_at")
  type             MediaType
  attachedTo       MediaAttachment
  basicLevel       BasicLevel?     @relation(fields: [basicLevelId], references: [id])
  primaryLevel     PrimaryLevel?   @relation(fields: [primaryLevelId], references: [id])
  school           SchoolData?     @relation(fields: [schoolId], references: [id])
  secondaryLevel   SecondaryLevel? @relation(fields: [secondaryLevelId], references: [id])

  @@index([schoolId])
  @@index([basicLevelId])
  @@index([primaryLevelId])
  @@index([secondaryLevelId])
  @@map("media")
}

enum MediaType {
  photo
  video
}

enum MediaAttachment {
  school
  primary
  basic
  secondary
}
