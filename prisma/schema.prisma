generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SchoolData {
  id                        String                @id @default(uuid())
  name                      String
  addressId                 Int
  phoneNumber1              String?
  phoneNumber2              String?
  phoneNumber3              String?
  schoolsWebSite            String?
  facebookProfileURL        String?
  instagramProfileURL       String?
  founder                   String?
  director                  String?
  publicRelationsManager    String?
  parentRelationshipManager String?
  infrastructureId          Int?
  primaryId                 Int?
  basicId                   Int?
  secondaryID               Int?
  otherPrograms             String?
  description               String?
  hasTutor                  Boolean               @default(false)
  tutorDescription          String?
  hasScholarshipsGrants     Boolean               @default(false)
  scholarshipsGrants        String?
  hasExchangePrograms       Boolean               @default(false)
  exchangePrograms          String?
  hasOutdoorGarden          Boolean               @default(false)
  outdoorGarden             String?
  createdAt                 DateTime              @default(now())
  createdBy                 DateTime?
  updatedAt                 DateTime              @updatedAt
  updatedBy                 DateTime?
  establishedYear           Int?
  accreditationStatus       String?
  accreditationComment      String?
  graduationRate            Float?                @db.Real
  averageNationalExamScore  Float?                @db.Real
  address                   Address               @relation(fields: [addressId], references: [id])
  infrastructure            Infrastructure?       @relation(fields: [infrastructureId], references: [id])
  primary              Primary?         @relation("PrimaryToSchool")
  basic                Basic?           @relation("BasicToSchool")
  secondary            Secondary?       @relation("SecondaryToSchool")
  media                     Media[]
  levelMandatorySports      LevelMandatorySport[]

  @@index([addressId])
  @@index([basicId])
  @@index([infrastructureId])
  @@index([primaryId])
  @@index([secondaryID])
}

model Address {
  id       Int          @id @default(autoincrement())
  city     String
  district String
  street   String
  zipCode  String
  schools  SchoolData[]
}

model Infrastructure {
  id                     Int          @id @default(autoincrement())
  buildings              Boolean      @default(false)
  numberOfFloors         Int?
  squareness             Int?
  stadiums               Boolean      @default(false)
  pools                  Boolean      @default(false)
  courtyard              Boolean      @default(false)
  laboratories           Boolean      @default(false)
  library                Boolean      @default(false)
  cafe                   Boolean      @default(false)
  schools                SchoolData[]
}

model Primary {
  id                        Int        @id @default(autoincrement())
  schoolId                  String     @unique
  school                    SchoolData @relation("PrimaryToSchool", fields: [schoolId], references: [id]) 
  price                     Decimal
  duration                  String
  discountAndPaymentTerms   String?
  numberOfStudents          Int
  meals                     String?
  mealsDescription          String?
  transportation            String?
  schoolUniform             Boolean    @default(false)
  mandatorySportsClubs      String?
  foreignLanguages          String?
  teachingStyleBooks        String?
  clubsAndCircles           String?
  textbooksPrice            String?
  media                     Media[]

  @@index([schoolId])
}

model Basic {
  id                        Int        @id @default(autoincrement())
  schoolId                  String     @unique
  school                    SchoolData @relation("BasicToSchool", fields: [schoolId], references: [id]) 
  price                     Decimal
  duration                  String
  discountAndPaymentTerms   String?
  numberOfStudents          Int
  meals                     String?
  mealsDescription          String?
  transportation            String?
  schoolUniform             Boolean    @default(false)
  mandatorySportsClubs      String?
  foreignLanguages          String?
  teachingStyleBooks        String?
  clubsAndCircles           String?
  textbooksPrice            String?
  media                     Media[]

  @@index([schoolId])
}

model Secondary {
  id                        Int        @id @default(autoincrement())
  schoolId                  String     @unique
  school                    SchoolData @relation("SecondaryToSchool", fields: [schoolId], references: [id]) 
  price                     Decimal
  duration                  String
  discountAndPaymentTerms   String?
  numberOfStudents          Int
  meals                     String?
  mealsDescription          String?
  transportation            String?
  schoolUniform             Boolean    @default(false)
  mandatorySportsClubs      String?
  foreignLanguages          String?
  teachingStyleBooks        String?
  clubsAndCircles           String?
  textbooksPrice            String?
  media                     Media[]

  @@index([schoolId])
}

model Media {
  id               Int             @id @default(autoincrement())
  mediaUrl         String          @map("media_url")
  description      String?
  schoolId         String?         @map("school_id")
  basicId          Int?            @map("basic_id")
  primaryId        Int?            @map("primary_id")
  secondaryId      Int?            @map("secondary_id")
  createdAt        DateTime?       @default(now()) @map("created_at")
  updatedAt        DateTime?       @default(now()) @updatedAt @map("updated_at")
  type             MediaType
  attachedTo       MediaAttachment
  basic       Basic?     @relation(fields: [basicId], references: [id])
  primary     Primary?   @relation(fields: [primaryId], references: [id])
  school           SchoolData?     @relation(fields: [schoolId], references: [id])
  secondary   Secondary? @relation(fields: [secondaryId], references: [id])

  @@index([schoolId])
  @@index([basicId])
  @@index([primaryId])
  @@index([secondaryId])
  @@map("media")
}

model LevelMandatorySport {
  id          Int       @id @default(autoincrement())
  school_id   String    
  school_name String
  level_name  LevelName
  level_id    Int
  sport       String

  price                     Decimal @db.Decimal(10, 2) // adjust precision as needed
  duration                  String
  discountAndPaymentTerms   String?
  numberOfStudents          Int
  meals                     String?
  mealsDescription          String?
  transportation            String?
  transportationDescription String?
  schoolUniform             Boolean
  schoolUniformDescription  String?
  optionalSportsClubs       String?
  foreignLanguages          String?
  teachingStyleBooks        String?
  clubsAndCircles           String?
  textbooksPrice            String?

  school SchoolData @relation(fields: [school_id], references: [id])

  @@map("LevelMandatorySport") // map to exact DB table name
}

enum LevelName {
  Primary
  Basic
  Secondary
}

enum MediaType {
  photo
  video
}

enum MediaAttachment {
  school
  primary
  basic
  secondary
}